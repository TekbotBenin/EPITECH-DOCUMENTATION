{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to EPITECH Documentation Table of Content I. ABOUT EPITECH Epitech PEDAGOGY Links & Documents II. INSTALLATIONS & CONFIGURATIONS Windows + Linux Distro EPITECH DUMP III. TOOLS CHEATSHEET Blih Emacs Git Makefile Csfml Library Ncurses Library IV. C PROGRAMMING Simples functions Your library Unit Test V. ABOUT US EPITOOLS Contribution License First solve the problem. Then, write the code. \u2013 John Johnson","title":"Welcome to EPITECH Documentation"},{"location":"#welcome-to-epitech-documentation","text":"","title":"Welcome to EPITECH Documentation"},{"location":"#table-of-content","text":"I. ABOUT EPITECH Epitech PEDAGOGY Links & Documents II. INSTALLATIONS & CONFIGURATIONS Windows + Linux Distro EPITECH DUMP III. TOOLS CHEATSHEET Blih Emacs Git Makefile Csfml Library Ncurses Library IV. C PROGRAMMING Simples functions Your library Unit Test V. ABOUT US EPITOOLS Contribution License First solve the problem. Then, write the code. \u2013 John Johnson","title":"Table of Content"},{"location":"about_epitech/epitech/","text":"","title":"Epitech PEDAGOGY"},{"location":"about_epitech/links_docs/","text":"","title":"Links & Documents"},{"location":"about_us/contribution/","text":"","title":"Contribution"},{"location":"about_us/epitools/","text":"EPITECH-CHEAT_SHEET by Blacky_yg , NemesisX1 and Prince","title":"EPITOOLS"},{"location":"about_us/epitools/#epitech-cheat_sheet-by-blacky_yg-nemesisx1-and-prince","text":"","title":"EPITECH-CHEAT_SHEET by Blacky_yg, NemesisX1 and Prince"},{"location":"about_us/license/","text":"","title":"LICENSE"},{"location":"c_programming/functions/","text":"","title":"Simples functions"},{"location":"c_programming/libmy/","text":"","title":"Your library"},{"location":"c_programming/unit_test/","text":"","title":"Unit Test"},{"location":"install_config/dual_boot/","text":"","title":"Windows + Linux Distro"},{"location":"install_config/dump/","text":"The script available on the following repository Kayofeld Repository is perfect for the epitech dump.","title":"EPITECH DUMP"},{"location":"tools_cheatsheet/blih/","text":"The Bocal Lightweight Interface for Humans, BLIH is the EPITECH repository management tool. A student from the class of 2021 created a WEB interface called BLIH web . Throughout the school year, you're going to have to submit projects on Epitech servers. If you have used the kayofeld script, you are a winner. The script installs the BLIH and configures the necessary. Else, following these steps : Generate a new key, that is stored as a file and will allow you to authenticate yourself on the submittal system and secure the data exchanges. Here, you will leave all of the default values by simply pressing enter each time. $ ssh-keygen By default, the ssh key was generated in a file on your pc, in your home ~/.ssh/ . $ ls ~/.ssh/ You can see in this folder (~/.ssh), there are two files. Now all you have to do is link your ssh key to blih by using this command, and enter your UNIX password (Epitech Password) $ blih -u \"prenom.nom@epitech.eu\" sshkey upload ~/.ssh/id_rsa.pub Now, BLIH is ready to be used. You can also use this script in python for a good user experience Thanks to blih tool.","title":"Blih"},{"location":"tools_cheatsheet/csfml/","text":"How to understand and start 2D game :robot: Understand the game A 2D game is mainly a king of program which generally follow a guideline. It is made with 3 main parts: Initialization Game loop Free resources You notice the game core is the game loop. But we will describe the two others parts. Initialization In this part you load in the memory all the component you want to use inside your game loop. You have to initialize the variables you want to use with the right element, sprite, sound, image, text, all your asset and whatever you want to use inside the game. It is also here you will fix the position of your assets (for example you will set the positions of all the assets, probably decide if you want to play the main sound of your game as soon as the game start). It is important to do this part before the game loop. Game loop The game loop is the main part of the game. It is here you will implement the game logic, manage events and also where you will draw the assets. By game logic, I mean all the game \"itself\". It is here you will define how the player will move, how the score will be displayed, what will happen if you click on \"Play\", etc... It is here where you will define whatever should happens according to the events. An event could be a keyboard input, the collision between two objects, check when a click happens and others things as it. So the game loop is divided in three parts: event loop : where you manage all the events which will happen in the game , update : where live the game logic , drawing : the part where you draw all the asset you want in the game. You could follow this way to correctly setup or organize your future game project. Free resources It this part you free (is necessary because it depends on your programming language) the all the memory you should have used in your game :smirk: This just an overview of the organization of a video game project. It may change depend on the game engine and barely of the framework you use. So feel free to follow the way you want to follow Set up the game in CSFML Let go to a new step. You wanna create a game. Let make first a simple window. #include <SFML/Graphics.h> #include <SFML/Config.h> #include <SFML/Audio.h> #include <SFML/System.h> sfRenderWindow *create_window(unsigned int width, unsigned int height, char const *title) { sfRenderWindow *Window; sfVideoMode mode; mode.width = width; mode.height = height; mode.bitsPerPixel = 32; Window = sfRenderWindow_create(mode, title, sfResize | sfClose, NULL); return (Window); } int main() { sfRenderWindow *window = create_window(800, 600, \"CSFML\"); sfEvent event; while (sfRenderWindow_isOpen(window)) { sfRenderWindow_clear(window, sfBlack); while (sfRenderWindow_pollEvent(window, &event)) { if (event.type == sfEvtClosed || sfKeyboard_isKeyPressed(sfKeyEscape)) sfRenderWindow_close(window); } sfRenderWindow_display(window); } sfRenderWindow_destroy(window); }","title":"Csfml Library"},{"location":"tools_cheatsheet/csfml/#how-to-understand-and-start-2d-game-robot","text":"","title":"How to understand and start 2D game :robot:"},{"location":"tools_cheatsheet/csfml/#understand-the-game","text":"A 2D game is mainly a king of program which generally follow a guideline. It is made with 3 main parts: Initialization Game loop Free resources You notice the game core is the game loop. But we will describe the two others parts. Initialization In this part you load in the memory all the component you want to use inside your game loop. You have to initialize the variables you want to use with the right element, sprite, sound, image, text, all your asset and whatever you want to use inside the game. It is also here you will fix the position of your assets (for example you will set the positions of all the assets, probably decide if you want to play the main sound of your game as soon as the game start). It is important to do this part before the game loop. Game loop The game loop is the main part of the game. It is here you will implement the game logic, manage events and also where you will draw the assets. By game logic, I mean all the game \"itself\". It is here you will define how the player will move, how the score will be displayed, what will happen if you click on \"Play\", etc... It is here where you will define whatever should happens according to the events. An event could be a keyboard input, the collision between two objects, check when a click happens and others things as it. So the game loop is divided in three parts: event loop : where you manage all the events which will happen in the game , update : where live the game logic , drawing : the part where you draw all the asset you want in the game. You could follow this way to correctly setup or organize your future game project. Free resources It this part you free (is necessary because it depends on your programming language) the all the memory you should have used in your game :smirk: This just an overview of the organization of a video game project. It may change depend on the game engine and barely of the framework you use. So feel free to follow the way you want to follow","title":"Understand the game"},{"location":"tools_cheatsheet/csfml/#set-up-the-game-in-csfml","text":"Let go to a new step. You wanna create a game. Let make first a simple window. #include <SFML/Graphics.h> #include <SFML/Config.h> #include <SFML/Audio.h> #include <SFML/System.h> sfRenderWindow *create_window(unsigned int width, unsigned int height, char const *title) { sfRenderWindow *Window; sfVideoMode mode; mode.width = width; mode.height = height; mode.bitsPerPixel = 32; Window = sfRenderWindow_create(mode, title, sfResize | sfClose, NULL); return (Window); } int main() { sfRenderWindow *window = create_window(800, 600, \"CSFML\"); sfEvent event; while (sfRenderWindow_isOpen(window)) { sfRenderWindow_clear(window, sfBlack); while (sfRenderWindow_pollEvent(window, &event)) { if (event.type == sfEvtClosed || sfKeyboard_isKeyPressed(sfKeyEscape)) sfRenderWindow_close(window); } sfRenderWindow_display(window); } sfRenderWindow_destroy(window); }","title":"Set up the game in CSFML"},{"location":"tools_cheatsheet/emacs/","text":"4. Emacs or VSCode At Epitech, the default text editor is our good old emacs. However Visual Studio Code is interfering in our relationship with emacs and is taking over from its many extensions and style. One more time, if you have used the kayofeld script, you are a winner. The script installs emacs and configures the necessary. Really good kayofeld. :stuck_out_tongue_winking_eye: Installation Epitehc Emacs For the installation of emacs with Epitech configuration, you can use the script available in this repository github Epitech-emacs . Go to this repository, clone him and follow the steps. Installation of VSCode","title":"Emacs"},{"location":"tools_cheatsheet/emacs/#4-emacs-or-vscode","text":"At Epitech, the default text editor is our good old emacs. However Visual Studio Code is interfering in our relationship with emacs and is taking over from its many extensions and style. One more time, if you have used the kayofeld script, you are a winner. The script installs emacs and configures the necessary. Really good kayofeld. :stuck_out_tongue_winking_eye:","title":"4. Emacs or VSCode"},{"location":"tools_cheatsheet/emacs/#installation-epitehc-emacs","text":"For the installation of emacs with Epitech configuration, you can use the script available in this repository github Epitech-emacs . Go to this repository, clone him and follow the steps.","title":"Installation Epitehc Emacs"},{"location":"tools_cheatsheet/emacs/#installation-of-vscode","text":"","title":"Installation of VSCode"},{"location":"tools_cheatsheet/git/","text":"3. Git Git is a distributed version-control system for tracking changes in source code during software development, created by Linus Torvalds in 2005 for development of the Linux kernel. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows[clarification needed]. If you have used the kayofeld script, you are a winner. The script installs the git and configures the necessary. Otherwise it's not complicated, just install the git package with your package manager : On Debian / Ubuntu : $ sudo apt-get install git-all On Fedora : $ sudo dnf install git-all On Archlinux : $ sudo pacman -Syu git Thanks to Linus Torvalds.","title":"Git"},{"location":"tools_cheatsheet/git/#3-git","text":"Git is a distributed version-control system for tracking changes in source code during software development, created by Linus Torvalds in 2005 for development of the Linux kernel. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows[clarification needed]. If you have used the kayofeld script, you are a winner. The script installs the git and configures the necessary. Otherwise it's not complicated, just install the git package with your package manager : On Debian / Ubuntu : $ sudo apt-get install git-all On Fedora : $ sudo dnf install git-all On Archlinux : $ sudo pacman -Syu git Thanks to Linus Torvalds.","title":"3. Git"},{"location":"tools_cheatsheet/makefile/","text":"","title":"Makefile"},{"location":"tools_cheatsheet/ncurses/","text":"","title":"Ncurses Library"}]}