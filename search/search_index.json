{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to EPITECH Documentation Table of Content I. ABOUT EPITECH Epitech PEDAGOGY Links & Documents II. INSTALLATIONS & CONFIGURATIONS Windows + Linux Distro EPITECH DUMP III. TOOLS CHEATSHEET Blih Emacs Git Makefile Csfml Library Ncurses Library IV. C PROGRAMMING Simples functions Your library Unit Test V. ABOUT US EPITOOLS Contribution License First solve the problem. Then, write the code. \u2013 John Johnson","title":"Welcome to EPITECH Documentation"},{"location":"#welcome-to-epitech-documentation","text":"","title":"Welcome to EPITECH Documentation"},{"location":"#table-of-content","text":"I. ABOUT EPITECH Epitech PEDAGOGY Links & Documents II. INSTALLATIONS & CONFIGURATIONS Windows + Linux Distro EPITECH DUMP III. TOOLS CHEATSHEET Blih Emacs Git Makefile Csfml Library Ncurses Library IV. C PROGRAMMING Simples functions Your library Unit Test V. ABOUT US EPITOOLS Contribution License First solve the problem. Then, write the code. \u2013 John Johnson","title":"Table of Content"},{"location":"about_epitech/epitech/","text":"","title":"Epitech PEDAGOGY"},{"location":"about_epitech/links_docs/","text":"","title":"Links & Documents"},{"location":"about_us/contribution/","text":"","title":"Contribution"},{"location":"about_us/epitools/","text":"EPITECH-CHEAT_SHEET by Blacky_yg , NemesisX1 and Prince","title":"EPITOOLS"},{"location":"about_us/epitools/#epitech-cheat_sheet-by-blacky_yg-nemesisx1-and-prince","text":"","title":"EPITECH-CHEAT_SHEET by Blacky_yg, NemesisX1 and Prince"},{"location":"about_us/license/","text":"","title":"LICENSE"},{"location":"c_programming/functions/","text":"","title":"Simples functions"},{"location":"c_programming/libmy/","text":"","title":"Your library"},{"location":"c_programming/unit_test/","text":"","title":"Unit Test"},{"location":"install_config/dual_boot/","text":"Installations and configurations Installations At Epitech you will be provided at the beginning of the year with a PC with 1 TB (Terabyte) of memory and 8 GB of RAM storage. As operating system Epitech will offer you fedora and windows to install. Here we are going to see together step by step how to install in dual boot the Windows and linux systems (debian or fedora). Without further ado we will start by installing windows 10. Windows Windows is a range of full-fledged operating systems produced by Microsoft for PCs. We will start with the installation of Windows. You are going to wonder why Windows first? Well It is because of the Grub which is a computer boot program, its role is to organize the loading of the operating systems installed on the computer; it allows you to choose when booting the system on which you want to boot. The Windows Grub cannot allow us to see all the systems which are installed on the pc whereas a linux system does. By default the computer starts on the system grub installed in the last position, which then justifies the choice of the installation order which is: Windows first then comes the linux distribution that we want to install. An example of Grub: Fedora's grub First of all before starting the installation of windows you must first do what is called booting a key on windows (ie booting the usb key with the iso of windows 10). Epitech will provide you with a key already booting on Windows but in the event that you do not have a key already booting on Windows it is then up to you to boot a key (at least 8 GB). Step 1 Insert the key in the pc and start the pc set the language and you will see a window like the one below, click on install now Step 2 This is to enter an activation key that allows you to activate your Windows. The activation key is from Epitech is: Step 3 We are now at the most important part, partitioning the hard drive. I remind you that I said at the beginning that we want to install two dual-boot systems on the pc. We will then divide the disk into two large partitions. To do this : 1. Click on **new**; 2. Enter the value of the new partition in bytes and validate; 3. choose the partition and click **next** and the partitions will be created automatically.","title":"Windows + Linux Distro"},{"location":"install_config/dual_boot/#installations-and-configurations","text":"","title":"Installations and configurations"},{"location":"install_config/dual_boot/#installations","text":"At Epitech you will be provided at the beginning of the year with a PC with 1 TB (Terabyte) of memory and 8 GB of RAM storage. As operating system Epitech will offer you fedora and windows to install. Here we are going to see together step by step how to install in dual boot the Windows and linux systems (debian or fedora). Without further ado we will start by installing windows 10.","title":"Installations"},{"location":"install_config/dual_boot/#windows","text":"Windows is a range of full-fledged operating systems produced by Microsoft for PCs. We will start with the installation of Windows. You are going to wonder why Windows first? Well It is because of the Grub which is a computer boot program, its role is to organize the loading of the operating systems installed on the computer; it allows you to choose when booting the system on which you want to boot. The Windows Grub cannot allow us to see all the systems which are installed on the pc whereas a linux system does. By default the computer starts on the system grub installed in the last position, which then justifies the choice of the installation order which is: Windows first then comes the linux distribution that we want to install. An example of Grub: Fedora's grub First of all before starting the installation of windows you must first do what is called booting a key on windows (ie booting the usb key with the iso of windows 10). Epitech will provide you with a key already booting on Windows but in the event that you do not have a key already booting on Windows it is then up to you to boot a key (at least 8 GB).","title":"Windows"},{"location":"install_config/dual_boot/#step-1","text":"Insert the key in the pc and start the pc set the language and you will see a window like the one below, click on install now","title":"Step 1"},{"location":"install_config/dual_boot/#step-2","text":"This is to enter an activation key that allows you to activate your Windows. The activation key is from Epitech is:","title":"Step 2"},{"location":"install_config/dual_boot/#step-3","text":"We are now at the most important part, partitioning the hard drive. I remind you that I said at the beginning that we want to install two dual-boot systems on the pc. We will then divide the disk into two large partitions. To do this : 1. Click on **new**; 2. Enter the value of the new partition in bytes and validate; 3. choose the partition and click **next** and the partitions will be created automatically.","title":"Step 3"},{"location":"install_config/dump/","text":"The script available on the following repository Kayofeld Repository is perfect for the epitech dump.","title":"EPITECH DUMP"},{"location":"tools_cheatsheet/blih/","text":"The Bocal Lightweight Interface for Humans, BLIH is the EPITECH repository management tool. A student from the class of 2021 created a WEB interface called BLIH web . Throughout the school year, you're going to have to submit projects on Epitech servers. If you have used the kayofeld script, you are a winner. The script installs the BLIH and configures the necessary. Else, following these steps : Generate a new key, that is stored as a file and will allow you to authenticate yourself on the submittal system and secure the data exchanges. Here, you will leave all of the default values by simply pressing enter each time. $ ssh-keygen By default, the ssh key was generated in a file on your pc, in your home ~/.ssh/ . $ ls ~/.ssh/ You can see in this folder (~/.ssh), there are two files. Now all you have to do is link your ssh key to blih by using this command, and enter your UNIX password (Epitech Password) $ blih -u \"prenom.nom@epitech.eu\" sshkey upload ~/.ssh/id_rsa.pub Now, BLIH is ready to be used. You can also use this script in python for a good user experience Thanks to blih tool.","title":"Blih"},{"location":"tools_cheatsheet/csfml/","text":"How to understand and start 2D game :robot: Understand the game A 2D game is mainly a kind of program which generally follow a guideline. It is made with 3 main parts: Initialization Game loop Free resources You notice the game core is the game loop. But we will describe the two others parts. Initialization In this part you load in memory all the component you want to use inside your game loop. You have to initialize the variables you want to use with the right element, sprite, sound, image, text, all your asset and whatever you want to use inside the game. It is also here you will fix the position of your assets (for example you will set the positions of all the assets, probably decide if you want to play the main sound of your game as soon as the game start). It is important to do this part before the game loop. Game loop The game loop is the main part of the game. It is here you will implement the game logic, manage events and also where you will draw the assets. By game logic, I mean all the game \"itself\". It is here you will define how the player will move, how the score will be displayed, what will happen if the player clicks on \"Play\" button, etc... It is here where you will define whatever should happen according to events. An event could be a keyboard input, collision between two objects, when a click happens and others such things. So the game loop is divided in three parts: event loop : where you manage all the events which will happen in the game , update : where live the game logic, drawing : the part where you draw all the asset you want in the game. You could follow this way to correctly setup or organize your future game project. Free resources In this part you free (if necessary.. because it depends on your programming language) the all the memory you should have used in your game :smirk: This just an overview of the organization of a video game project. It may change depend on the game engine and barely of the framework you use. So feel free to follow the way you want to follow Set up the game in CSFML Basics Let go to a new step. You wanna create a game. Let make first a simple window. #include <SFML/Graphics.h> #include <SFML/Config.h> #include <SFML/Audio.h> #include <SFML/System.h> sfRenderWindow *create_window(unsigned int width, unsigned int height, char const *title) { sfRenderWindow *Window; sfVideoMode mode; mode.width = width; mode.height = height; mode.bitsPerPixel = 32; Window = sfRenderWindow_create(mode, title, sfResize | sfClose, NULL); return (Window); } int main() { sfRenderWindow *window = create_window(800, 600, \"CSFML\"); sfEvent event; while (sfRenderWindow_isOpen(window)) { sfRenderWindow_clear(window, sfBlack); while (sfRenderWindow_pollEvent(window, &event)) { if (event.type == sfEvtClosed || sfKeyboard_isKeyPressed(sfKeyEscape)) sfRenderWindow_close(window); } sfRenderWindow_display(window); } sfRenderWindow_destroy(window); } Put this code inside a file, file_name.c . You can compile this code with gcc file_name.c -lcsfml-graphics -lcsfml-window . If you launched it, you will see a black window. Simple and basic. Explanation Let explain this pretty code you've compiled. #include <SFML/Graphics.h> #include <SFML/Config.h> #include <SFML/Audio.h> #include <SFML/System.h> Those lines refer to the main include you will use for all your Epitech game project. It contains all you need for graphic, sound, manage user key input, etc.... sfRenderWindow *create_window(unsigned int width, unsigned int height, char const *title) { sfRenderWindow *Window; sfVideoMode mode; mode.width = width; mode.height = height; mode.bitsPerPixel = 32; Window = sfRenderWindow_create(mode, title, sfResize | sfClose, NULL); return (Window); } This function will be very useful through all the MUL projects you will build this year. It take in parameters the width, the height and the title of the screen. Inside, sfRenderWindow *Window refers to the window where all the game will be played, sfVideoMode mode refers to the screen's configuration (the width, the height and the number of bits per pixel which impact the global window's resolution). sfRenderWindow *window = create_window(800, 600, \"CSFML\"); sfEvent event; I guess you can understand that... Don't be stupid :smirk:! while (sfRenderWindow_isOpen(window)) This is the main loop of the game, which run while window is not closed. It can be replace also by while(running) with running a boolean value set to true . Close the window is so the same as set running to false . sfRenderWindow_clear(window, sfBlack); This line allows screen to refresh every time all the actions you declare in the game loop ended. It make sure you will not have an error in your displaying. It also provide a way to set a custom background color. while (sfRenderWindow_pollEvent(window, &event)) It this loop, you will be able to handle every event which should happens at least one time such collision, user input and may other things. if (event.type == sfEvtClosed || sfKeyboard_isKeyPressed(sfKeyEscape)) sfRenderWindow_close(window); This condition is just : \" If the event which happens is sfEvtClosed (if the user want to close the window by clicking on the red cross button on the top of your window), close the game's render window. \" sfRenderWindow_display(window); This line allows you to continue to display the game's window as the game is going on. sfRenderWindow_destroy(window); This line free the resources allocated to display the window. It is a VERY IMPORTANT STEP . It makes your program more stable and able to run with much amount of variables and data. How to use correctly the documentation There is no tutorials about CSFML on internet. The only one you will find is an portuguese video tutorial about it. But it still a few useless when you look at the amount of work you will have to achieve. The right way to use the documentation... That is a great deal to handle this year in graphical programming... 5 credits for the first semester and 9 for the second one. So I will give you some tips about it. The first thing you have to handle is the logic of the documentation. All the .h files located in the File tab. If you're looking for some functions about audio management, you have to search the Audio.h file documentation. And if you need something about sprite handling: Sprite.h , about keyboard management: Keyboard.h . By doing this you'll be able to easily find your way through this documentation. Other tips: Take time to read it . It is not difficult. And if you take time just to understand the way everything is going on through this docs, you'll easily be able to understand a lot about 2D game's logic. More tips and help If you want more tricks about CSFML... Don't hesitate to visit CleanSFML project.","title":"Csfml Library"},{"location":"tools_cheatsheet/csfml/#how-to-understand-and-start-2d-game-robot","text":"","title":"How to understand and start 2D game :robot:"},{"location":"tools_cheatsheet/csfml/#understand-the-game","text":"A 2D game is mainly a kind of program which generally follow a guideline. It is made with 3 main parts: Initialization Game loop Free resources You notice the game core is the game loop. But we will describe the two others parts. Initialization In this part you load in memory all the component you want to use inside your game loop. You have to initialize the variables you want to use with the right element, sprite, sound, image, text, all your asset and whatever you want to use inside the game. It is also here you will fix the position of your assets (for example you will set the positions of all the assets, probably decide if you want to play the main sound of your game as soon as the game start). It is important to do this part before the game loop. Game loop The game loop is the main part of the game. It is here you will implement the game logic, manage events and also where you will draw the assets. By game logic, I mean all the game \"itself\". It is here you will define how the player will move, how the score will be displayed, what will happen if the player clicks on \"Play\" button, etc... It is here where you will define whatever should happen according to events. An event could be a keyboard input, collision between two objects, when a click happens and others such things. So the game loop is divided in three parts: event loop : where you manage all the events which will happen in the game , update : where live the game logic, drawing : the part where you draw all the asset you want in the game. You could follow this way to correctly setup or organize your future game project. Free resources In this part you free (if necessary.. because it depends on your programming language) the all the memory you should have used in your game :smirk: This just an overview of the organization of a video game project. It may change depend on the game engine and barely of the framework you use. So feel free to follow the way you want to follow","title":"Understand the game"},{"location":"tools_cheatsheet/csfml/#set-up-the-game-in-csfml","text":"","title":"Set up the game in CSFML"},{"location":"tools_cheatsheet/csfml/#basics","text":"Let go to a new step. You wanna create a game. Let make first a simple window. #include <SFML/Graphics.h> #include <SFML/Config.h> #include <SFML/Audio.h> #include <SFML/System.h> sfRenderWindow *create_window(unsigned int width, unsigned int height, char const *title) { sfRenderWindow *Window; sfVideoMode mode; mode.width = width; mode.height = height; mode.bitsPerPixel = 32; Window = sfRenderWindow_create(mode, title, sfResize | sfClose, NULL); return (Window); } int main() { sfRenderWindow *window = create_window(800, 600, \"CSFML\"); sfEvent event; while (sfRenderWindow_isOpen(window)) { sfRenderWindow_clear(window, sfBlack); while (sfRenderWindow_pollEvent(window, &event)) { if (event.type == sfEvtClosed || sfKeyboard_isKeyPressed(sfKeyEscape)) sfRenderWindow_close(window); } sfRenderWindow_display(window); } sfRenderWindow_destroy(window); } Put this code inside a file, file_name.c . You can compile this code with gcc file_name.c -lcsfml-graphics -lcsfml-window . If you launched it, you will see a black window. Simple and basic.","title":"Basics"},{"location":"tools_cheatsheet/csfml/#explanation","text":"Let explain this pretty code you've compiled. #include <SFML/Graphics.h> #include <SFML/Config.h> #include <SFML/Audio.h> #include <SFML/System.h> Those lines refer to the main include you will use for all your Epitech game project. It contains all you need for graphic, sound, manage user key input, etc.... sfRenderWindow *create_window(unsigned int width, unsigned int height, char const *title) { sfRenderWindow *Window; sfVideoMode mode; mode.width = width; mode.height = height; mode.bitsPerPixel = 32; Window = sfRenderWindow_create(mode, title, sfResize | sfClose, NULL); return (Window); } This function will be very useful through all the MUL projects you will build this year. It take in parameters the width, the height and the title of the screen. Inside, sfRenderWindow *Window refers to the window where all the game will be played, sfVideoMode mode refers to the screen's configuration (the width, the height and the number of bits per pixel which impact the global window's resolution). sfRenderWindow *window = create_window(800, 600, \"CSFML\"); sfEvent event; I guess you can understand that... Don't be stupid :smirk:! while (sfRenderWindow_isOpen(window)) This is the main loop of the game, which run while window is not closed. It can be replace also by while(running) with running a boolean value set to true . Close the window is so the same as set running to false . sfRenderWindow_clear(window, sfBlack); This line allows screen to refresh every time all the actions you declare in the game loop ended. It make sure you will not have an error in your displaying. It also provide a way to set a custom background color. while (sfRenderWindow_pollEvent(window, &event)) It this loop, you will be able to handle every event which should happens at least one time such collision, user input and may other things. if (event.type == sfEvtClosed || sfKeyboard_isKeyPressed(sfKeyEscape)) sfRenderWindow_close(window); This condition is just : \" If the event which happens is sfEvtClosed (if the user want to close the window by clicking on the red cross button on the top of your window), close the game's render window. \" sfRenderWindow_display(window); This line allows you to continue to display the game's window as the game is going on. sfRenderWindow_destroy(window); This line free the resources allocated to display the window. It is a VERY IMPORTANT STEP . It makes your program more stable and able to run with much amount of variables and data.","title":"Explanation"},{"location":"tools_cheatsheet/csfml/#how-to-use-correctly-the-documentation","text":"There is no tutorials about CSFML on internet. The only one you will find is an portuguese video tutorial about it. But it still a few useless when you look at the amount of work you will have to achieve. The right way to use the documentation... That is a great deal to handle this year in graphical programming... 5 credits for the first semester and 9 for the second one. So I will give you some tips about it. The first thing you have to handle is the logic of the documentation. All the .h files located in the File tab. If you're looking for some functions about audio management, you have to search the Audio.h file documentation. And if you need something about sprite handling: Sprite.h , about keyboard management: Keyboard.h . By doing this you'll be able to easily find your way through this documentation. Other tips: Take time to read it . It is not difficult. And if you take time just to understand the way everything is going on through this docs, you'll easily be able to understand a lot about 2D game's logic.","title":"How to use correctly the documentation"},{"location":"tools_cheatsheet/csfml/#more-tips-and-help","text":"If you want more tricks about CSFML... Don't hesitate to visit CleanSFML project.","title":"More tips and help"},{"location":"tools_cheatsheet/emacs/","text":"4. Emacs or VSCode At Epitech, the default text editor is our good old emacs. However Visual Studio Code is interfering in our relationship with emacs and is taking over from its many extensions and style. One more time, if you have used the kayofeld script, you are a winner. The script installs emacs and configures the necessary. Really good kayofeld. :stuck_out_tongue_winking_eye: Installation Epitehc Emacs For the installation of emacs with Epitech configuration, you can use the script available in this repository github Epitech-emacs . Go to this repository, clone him and follow the steps. Installation of VSCode","title":"Emacs"},{"location":"tools_cheatsheet/emacs/#4-emacs-or-vscode","text":"At Epitech, the default text editor is our good old emacs. However Visual Studio Code is interfering in our relationship with emacs and is taking over from its many extensions and style. One more time, if you have used the kayofeld script, you are a winner. The script installs emacs and configures the necessary. Really good kayofeld. :stuck_out_tongue_winking_eye:","title":"4. Emacs or VSCode"},{"location":"tools_cheatsheet/emacs/#installation-epitehc-emacs","text":"For the installation of emacs with Epitech configuration, you can use the script available in this repository github Epitech-emacs . Go to this repository, clone him and follow the steps.","title":"Installation Epitehc Emacs"},{"location":"tools_cheatsheet/emacs/#installation-of-vscode","text":"","title":"Installation of VSCode"},{"location":"tools_cheatsheet/git/","text":"3. Git Git is a distributed version-control system for tracking changes in source code during software development, created by Linus Torvalds in 2005 for development of the Linux kernel. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows[clarification needed]. If you have used the kayofeld script, you are a winner. The script installs the git and configures the necessary. Otherwise it's not complicated, just install the git package with your package manager : On Debian / Ubuntu : $ sudo apt-get install git-all On Fedora : $ sudo dnf install git-all On Archlinux : $ sudo pacman -Syu git Thanks to Linus Torvalds.","title":"Git"},{"location":"tools_cheatsheet/git/#3-git","text":"Git is a distributed version-control system for tracking changes in source code during software development, created by Linus Torvalds in 2005 for development of the Linux kernel. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows[clarification needed]. If you have used the kayofeld script, you are a winner. The script installs the git and configures the necessary. Otherwise it's not complicated, just install the git package with your package manager : On Debian / Ubuntu : $ sudo apt-get install git-all On Fedora : $ sudo dnf install git-all On Archlinux : $ sudo pacman -Syu git Thanks to Linus Torvalds.","title":"3. Git"},{"location":"tools_cheatsheet/makefile/","text":"","title":"Makefile"},{"location":"tools_cheatsheet/ncurses/","text":"","title":"Ncurses Library"}]}